Interaction with system
There are two methods by which we can interact with the system/machine/computer:
GUI â‡’ Graphical User Interface
ðŸ’¡ This is the pretty common way that we use to interact with the system, that includes taking the help of graphics to
demonstrate and visualise all the actions that we are doing.
CLI â‡’ Command Line Interface
ðŸ’¡ This kind of interaction mainly involves writing specific commands to perform any kind of operation in the system.




Start with the project
ðŸ’¡ Do all the following things using CLI only.
Create a node project.
Create a index.js file.
Create a text.txt file.
Write some content inside the file.
Use nodeâ€™s inbuilt module fs to read the content of file and print them to the console.
readFile :- This will read the file asynchronously.
const fs=require("fs")
fs.readFile("./text.txt",{encoding:"utf-8"},(err,data)=>{
if(err){
console.log("Cannot read the file")
console.log(err)
} else {
console.log(data)
}
})
console.log("Bye Guys!!")
readFileSync :- This will read the file synchronously, until the file reading is not finished, compiler is not going to the Bye
Guys!! statement.
const fs=require("fs")
const data=fs.readFileSync("./text.txt",{encoding:"utf-8"})
console.log(data)
console.log("Bye Guys!!")
Write into a file using the fs module again.
While writing it will automatically create the file.
writeFile :- This will write the file asynchronously.
const fs=require("fs")
fs.writeFile("./log.txt", "This is me first time wrinting in the file", (err)=>{
if(err){
console.log("Cannot write in the file")
console.log(err)
} else {
console.log("Data has been written in the file")
}
})
writeFileSync :- This will write the file synchronously, first the writing will be finished then the next task.
const fs=require("fs")
fs.writeFileSync("./log.txt", "This is me second time wrinting in the file")
writeFile will overwrite the previous content of the file.
Notes 3
So try appendFile to overcome this.
const fs=require("fs")
fs.appendFile("./log.txt", "\nThis is me third time wrinting in the file\n",(err)=>{
if(err){
console.log("Cannot be appended")
console.log(err)
} else {
console.log("Data has been appended in the file")
}
})
There is  appendFileSync as well, it works in the same as  readFileSync and  writeFileSync .
ðŸ’¡ Important Note:
1. Research how to take arguments from terminal.
2. Explore https://nodejs.dev/en/learn/ for easier understanding about the node documentation, cannot be used i